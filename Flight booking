from tkinter import *
import math
import time
import random
import mysql_api as sql

#window
window = Tk(screenName=None, baseName=None, className='Tk', useTk=1)
#window.wm_attributes("-transparentcolor", '#eeefff')
window.bind('<Escape>', lambda event: window.destroy())
window.title('Flight booking')
window.geometry('1366x768')
window.minsize(960, 540)
window.attributes('-fullscreen', True)

class Gui:
    def __init__(self):
        self.days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30 ,
        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
        self.month_num = ['January', 'February', 'March', 'April', 'May', 'June', 'July',
        'August', 'September', 'October', 'November', 'December']
        self.currency = {'Indian Rupee': ('₹', 1), 'US Dollar': ('$', 0.012), 'Euro': ('€', 0.010)}
        self.to_ = self.from_ = self.full_date = ''
        self.travel_date_entry = Entry()
    
    def flight_time(self, duration):
        time = []
        mins = round(random.randint(0, 57) / 5) * 5
        hrs = random.randint(0, 23)
        hrs_prefix = '0' if hrs < 10 else ''
        mins_prefix = '0' if mins < 10 else ''
        time.extend([hrs_prefix + str(hrs), mins_prefix + str(mins)])
        hrs = round(int(time[0]) + duration // 60)
        mins = round(int(time[1]) + duration % 60)
        if mins > 59:
            hrs += 1
            mins -= 60
        new_day = False
        if hrs > 23:
            hrs = hrs - 24
            new_day = True
        hrs_prefix = '0' if hrs < 10 else ''
        mins_prefix = '0' if mins < 10 else ''
        time.extend([hrs_prefix + str(hrs), mins_prefix + str(mins), new_day])
        return time
            
        return (random.randint(0,23),mins)
    def add_text(self, widget, text, color):
        widget.delete(0, "end")
        if color is not False:
            widget.config(fg = color)
        if text is not False:
            widget.insert(0, text)
        
    def logo(self):
        self.container = Frame(window)
        self.container.pack(fill = 'both', expand = True)
        self.container.grid_columnconfigure(1, weight = 1)
        self.container.grid_rowconfigure(2, weight = 1)
        self.logo_image = PhotoImage(file = 'images/Skyline_logo.png')
        label = Label(self.container, image = self.logo_image)
        label.pack(fill = 'both', expand =  True)
        def proceed():
            label.destroy()
            self.create_tab()
            self.home_page()
        label.after(250, proceed)
    
    def create_tab(self):
        for item in self.container.winfo_children():
            item.destroy()
        self.tab = Frame(self.container, height = 70 , bg = 'blue')
        self.tab.grid(row = 1, column = 1, sticky = 'new')

        self.main_frame = Frame(self.container)
        self.main_frame.grid(row = 2, column = 1, sticky = 'nsew')
        self.main_frame.grid_propagate(False)
        self.main_frame.grid_columnconfigure(1, weight = 1)
        self.main_frame.grid_rowconfigure(2, weight = 1)
        
        self.airline = Label(self.tab, text = 'Skyline', fg = 'white', bg = 'blue', font = ('Ariel', 25))
        self.airline.grid(row=1,column=2)
        
        self.slogan = Label(self.tab, text='Discover the world', font=('Ariel',10,'bold'), fg='white', bg='blue')
        self.slogan.grid(row=1,column=3,padx=5,pady=(0,5))

        file = 'images/Globe_logo.gif'
        frame_count = 120
        frames = [PhotoImage(file = file,format = f'gif -index {i}') for i in range(frame_count)]
        count = 0
        logo_label = Label(self.tab, image = '', bg = 'blue')
        logo_label.grid(column = 1, row = 1, padx = (10,0))
        def animation(count):
            img = frames[count]
            logo_label.configure(image = img)
            count += 1
            if count == frame_count:
                count = 0
            window.after(100, animation, count)
        animation(0)
        
        self.home = Button(self.tab, text = 'Home page', bg = 'blue', fg = 'white', height = 1,
        relief = 'flat', font = ('Ariel', 12), command = self.home_page)
        self.home.grid(column = 4, row = 1, padx = (500,0), pady = 10)
        
        self.book = Button(self.tab, text = 'Book flight', bg = 'blue', fg = 'white', height = 1,
        relief = 'flat', font = ('Ariel', 12), command = self.book_flight)
        self.book.grid(column = 5, row = 1, padx = (20,0), pady = 10)
        
        self.flights = Button(self.tab, text = 'Flights', bg = 'blue', fg = 'white', height = 1,
        relief = 'flat', font = ('Ariel', 12), command = self.search_flights)
        self.flights.grid(column = 6, row = 1, padx = (20,0), pady = 10)
        
    #home page
    def home_page(self):
        for item in self.main_frame.winfo_children():
            item.destroy()

        self.sunset_image = PhotoImage(file = 'images/Airplane_sunset.png')
        self.display = Label(self.main_frame, image = self.sunset_image, height = 550)
        self.display.grid(row = 2, column = 1, pady = (10,0), sticky = 'we', padx = 110)

    def pick_date(self):
        self.frame1 = Frame(self.tab2, bg = 'grey')
        self.frame1.grid(row = 2, column = 3, sticky = 'nsew', pady = (5,0))
        
        self.day_spinbox = Spinbox(self.frame1, from_ = 1, to = 31, font = ('Ariel', 15),
        width = 2, wrap = True, command = self.update_date)
        self.day_spinbox.grid(row = 1, column = 1, padx = (60,4), sticky = ('ns'))
        
        self.month_spinbox = Spinbox(self.frame1, values = self.month_num,
        font = ('Ariel', 15), width = 9, command = self.update_date)
        self.month_spinbox.grid(row = 1, column = 2, padx = 4)
        
        self.year_spinbox = Spinbox(self.frame1, from_ = time.localtime()[0], to = time.localtime()[0] + 1,
        font = ('Ariel', 15),width = 4, wrap = True, command = self.update_date)
        self.year_spinbox.grid(row = 1, column = 3, padx = 4)
        
    def valid_destination(self):
        self.from_ = self.from_var.get().strip().capitalize()
        self.to_ = self.to_var.get().strip().capitalize()
        if self.to_ == self.from_:
            return False
        if self.to_ in sql.fetch_countries() and self.from_ in sql.fetch_countries():
            return True
        else:
            return False
        
    def valid_date(self):
        month = self.travel_date_entry.get()[5:-5]
        year = self.travel_date_entry.get()[-4:]
        if not (year == str(time.localtime()[0]) or year == str(time.localtime()[0] + 1)):
            return False
        self.days[2] == '28'
        if int(year)%4 == 0:
            self.days[2] = '29'
        if month in self.month_num:
            month = self.month_num.index(month) + 1
        else:
            return False
        day = int(self.travel_date_entry.get()[0:2])
        if day > int(self.days[month]):
            return False
        if year == str(time.localtime()[0]):
            if month == time.localtime()[1]:
                if day <= time.localtime()[2]:
                    return False
            if month < time.localtime()[1]:
                return False
        self.full_date = self.travel_date_entry.get()
        return True
        
    def update_date(self):
        self.days[2] = 28
        if int(self.year_spinbox.get())%4 == 0:
            self.days[2] = 29
        self.travel_date_entry.delete(0, 'end')
        day = int(self.day_spinbox.get())
        if day > self.days[self.month_num.index(self.month_spinbox.get()) + 1]:
            day = self.days[self.month_num.index(self.month_spinbox.get()) + 1]
        ordinals = {1: 'st ', 2: 'nd ', 3: 'rd '}
        ordinal = 'th '
        if day in ordinals:
            ordinal = ordinals[day]
        if day < 10:
            day = ' ' + str(day)
        self.travel_date_entry.insert(1, str(day) + ordinal +
        self.month_spinbox.get() + ' ' + self.year_spinbox.get())
        self.date_month = self.month_num.index(self.month_spinbox.get()) + 1
        self.date_day = day
        self.date_year = int(self.year_spinbox.get())

    #booking
    def book_flight(self):
        for item in self.main_frame.winfo_children():
            item.destroy()
        frame = Frame(self.main_frame, bg = 'grey', height = 200)
        frame.grid(row = 1, column = 1, pady = (100, 0), sticky = 'we', padx = 110)
        frame.grid_columnconfigure(1, weight = 1)
        frame.grid_rowconfigure(2, weight = 1)
        frame.grid_propagate(False)

        tab1 = Frame(frame, bg = 'blue', height = 70)
        tab1.grid(sticky = 'new', row = 1, column = 1)
        tab1.grid_propagate(False)

        from_ = Label(tab1, text = 'From', font = ('Ariel', 20), bg = 'blue', fg = 'white')
        from_.grid(column = 1, row = 1, pady = 15, padx = (100))
        to = Label(tab1, text = 'To', font = ('Ariel', 20), bg = 'blue', fg = 'white')
        to.grid(column = 2, row = 1, padx = (90, 0))
        travel_date = Label(tab1, text = 'Travel Date', font = ('Ariel', 20), bg = 'blue', fg = 'white')
        travel_date.grid(column = 3, row = 1, padx = (210, 0))
        
        self.tab2 = Frame(frame, bg = 'grey')
        self.tab2.grid(sticky = 'nsew', row = 2, column = 1)
        self.tab2.grid_propagate(False)
        def temp(widget, text, mode, xcor):
            if mode == 1:
                # test
                self.frame2 = Frame(self.main_frame)
                self.frame2.place(x = xcor, y = 250)
                country = sql.fetch_countries(widget.get())
                if self.to_var.get().strip() in country:
                    country.remove(self.to_var.get().strip())
                if self.from_var.get().strip() in country:
                    country.remove(self.from_var.get().strip())
                button_dict = {}
                for i in country:
                    def action(x = i): 
                        self.add_text(widget, ' ' + x, False)
                        self.frame2.destroy()
                    button_dict[i] = Button(self.frame2, text = i, font = ('Ariel', 15),
                    width = 10, command = action)
                    button_dict[i].grid(column = 1, row = country.index(i))
            if mode == 1 and widget.get() == text:
                self.add_text(widget, False, 'black')
            elif widget.get() == '':
                self.add_text(widget, text, 'grey')
            if mode == 2:
                self.frame2.destroy()
        def temp_travel(mode, text):
            if mode == 1:
                self.pick_date()
                if not self.valid_date():
                    self.add_text(self.travel_date_entry, False, 'black')
            if mode == 2:
                if not self.valid_date():
                    self.add_text(self.travel_date_entry, text, 'grey')
                for item in self.frame1.winfo_children():
                    item.destroy()
        self.from_var = StringVar()
        from_entry = Entry(self.tab2, font = ('Ariel', 20), fg = 'grey', textvariable = self.from_var, width = 15)
        from_entry.grid(row = 1, column = 1,pady = (40,0), padx = (20, 0))
        from_entry.insert(0, ' from')
        from_entry.bind("<FocusIn>", lambda self: temp(from_entry, ' from', 1, 250))
        from_entry.bind("<FocusOut>", lambda self: temp(from_entry, ' from', 2, 250))
        from_entry.bind("<KeyRelease>", lambda self: temp(from_entry, ' from', 1, 250))

        self.to_var = StringVar()
        to_entry = Entry(self.tab2, font = ('Ariel', 20), fg = 'grey', textvariable = self.to_var, width = 15)
        to_entry.grid(row = 1, column = 2, padx = (20, 0), pady = (40,0))
        to_entry.insert(0, ' to')
        to_entry.bind("<FocusIn>", lambda self: temp(to_entry, ' to', 1, 500))
        to_entry.bind("<FocusOut>", lambda self: temp(to_entry, ' to', 2, 500))
        to_entry.bind("<KeyRelease>", lambda self: temp(from_entry, ' from', 1, 250))

        self.travel_date_entry = Entry(self.tab2, font = ('Ariel', 20), fg = 'grey')
        self.travel_date_entry.grid(row = 1, column = 3, padx = (30, 0), pady = (40,0))
        self.travel_date_entry.insert(0, ' dd/mm/yyyy')
        self.travel_date_entry.bind("<FocusIn>", lambda self: temp_travel(1, ' dd/mm/yyyy'))
        self.travel_date_entry.bind("<FocusOut>", lambda self: temp_travel(2, ' dd/mm/yyyy'))
        
        search = Button(self.tab2, text = 'Search', height = 2, width = 10, command = self.search_flights)
        search.grid(row = 1, column = 4, padx = (30,0), pady = (40,0))
        if self.full_date != '':
            self.add_text(self.travel_date_entry, self.full_date, 'black')

        if self.to_ != self.from_:
            self.add_text(to_entry, ' ' + self.to_, 'black')
            self.add_text(from_entry, ' ' + self.from_, 'black')
            
    def search_flights(self):
        if self.travel_date_entry.winfo_exists() and self.valid_date() and self.valid_destination():
            for item in self.main_frame.winfo_children():
                item.destroy()
            self.main_frame.grid_rowconfigure(4, weight = 1)
            self.main_frame.grid_columnconfigure(1, weight = 1)
            def get_flights(row):
                #test
                t = sql.country_info(self.from_)
                long1 = t[0][5]
                lat1 = t[0][4]
                t = sql.country_info(self.to_)
                long2 = t[0][5]
                lat2 = t[0][4]
                dist = (((long2 - long1) ** 2 + (lat2 - lat1) ** 2) ** (0.5)) * 111
                price = round(dist * 5 + random.randint(0, round(dist/3)))
                chosen_cur = 'Indian Rupee'
                symbol = self.currency[chosen_cur][0]
                duration = round((dist / 10 + random.randint(-20,20)) / 5) * 5
                time = self.flight_time(duration)

                pady = 40 if row == 1 else 0
                frame1 = Frame(self.main_frame, height = 130, bg = 'light blue')
                frame1.grid(row = row + 1, column = 1, sticky = 'we', padx = 150, pady = (pady, 0))
                frame1.grid_propagate(False)

                
                self.skyline_img = {}
                self.skyline_img[row] = PhotoImage(file = 'images/Skyline_thumbnail.png')
                airline_pic = Label(frame1, image = self.skyline_img[row])
                airline_pic.grid(column = 1, row = 1, rowspan = 2, padx = (15, 0), pady = 15)
                airline_pic.photo = self.skyline_img[row]
                
                airline_label = Label(frame1, text = 'Skyline', bg = 'light blue',
                font = ('Ariel', 20), fg = 'dark blue')
                airline_label.grid(row = 1, column = 2, padx = (10,0), pady = (0, 5), rowspan = 2)
                
                from_time_label = Label(frame1, text = time[0] + ':' + time[1],
                font = ('Ariel', 20, 'bold'), bg = 'light blue')
                from_time_label.grid(row = 1, column = 3, pady = (30, 0), padx = (60, 0))
                
                from_label = Label(frame1, text = self.from_,
                font = ('Ariel', 15), bg = 'light blue')
                from_label.grid(row = 2, column = 3, padx = (60, 0), pady = (0, 30))

                duration_label = Label(frame1, text = str(round(duration//60)) + 'h ' +
                str(round(duration % 60)) + 'm', font = ('Ariel', 13), bg = 'light blue')
                duration_label.grid(row = 1, column = 4, rowspan = 2, padx = 70)
                
                to_time_label = Label(frame1, text = time[2] + ':' + time[3],
                font = ('Ariel', 20, 'bold'), bg = 'light blue')
                to_time_label.grid(row = 1, column = 5, pady = (30,0))
                
                to_label = Label(frame1, text = self.to_,
                font = ('Ariel', 15), bg = 'light blue')
                to_label.grid(row = 2, column = 5, pady = (0, 30))

                price_label = Label(frame1, text = symbol + str(price * self.currency[chosen_cur][1]),
                bg = 'light blue', font = ('Ariel', 20))
                price_label.grid(row  =1, column = 6, rowspan = 2, padx = (60,0))

                book_button = Button(frame1, text = 'Book Flight',
                font = ('Ariel', 15), relief = GROOVE, bg = 'light blue')
                book_button.grid(row = 1, rowspan = 2, column = 7, padx = (10, 0))
            for i in range(1,random.randint(3,4)):
                get_flights(i)
                
    def valid_details(self):
        d = {1: self.name_entry, 2: self.email_entry, 3: self.mobile_entry}
        for i in range(1, 4):
            if i == 1:
                if not 4 > len(d[i].get().split()) > 1:
                    return False
            elif i == 2:
                if d[i].get().find('@') == -1 or d[i].get()[-4:] != '.com':
                    return False
            elif i == 3:
                num = ''.join(str(d[i].get()).split())
                if len(num) != 10 or not num.isdecimal() :
                    return False
        return True

    # booking details
    def booking_details(self):
        theme = 'light blue'
        for item in self.main_frame.winfo_children():
                item.destroy()
        frame = Frame(self.main_frame, bg = theme)
        frame.grid(row = 1, column = 1, sticky = 'we', padx = 130, pady = (30, 0))
        frame.grid_columnconfigure(2, weight = 1)
        frame.grid_rowconfigure(8, weight = 1)

        def temp(widget, text, mode):
            if mode == 1 and widget.get() == text:
                self.add_text(widget, False, 'black')
            elif widget.get() == '':
                self.add_text(widget, text, 'grey')
            elif mode == 2:
                if len(widget.get()) > 0 and widget.get()[0] != ' ':
                    self.add_text(widget, ' ' + widget.get(), 'black')
                if widget == self.mobile_entry and len(self.mobile_entry.get().strip()) == 10:
                    no = self.mobile_entry.get().strip()
                    self.add_text(widget,' ' + no[:2] + ' ' + no[2:], 'black')
        main_label = Label(frame, text = 'Booking Details', bg = theme, font = ('Ariel', 25, 'bold'))
        main_label.grid(row = 1, column = 1, padx = (20, 20), pady = (20, 20))
        
        name_label = Label(frame, text = 'Full name', font = ('Ariel', 20), bg = theme)
        name_label.grid(row = 2, column = 1, pady = (0, 5))
        self.name_entry = Entry(frame, font = ('Ariel', 20), fg = 'grey', width = 30)
        self.name_entry.grid(row = 2, column = 2, sticky = 'w', padx = (200, 0))
        self.name_entry.bind("<FocusIn>", lambda a: temp(self.name_entry, ' full name', 1))
        self.name_entry.bind("<FocusOut>", lambda a: temp(self.name_entry, ' full name', 2))
        self.name_entry.insert(0, ' full name')

        email_label = Label(frame, text = 'Email', bg = theme, font = ('Ariel', 20))
        email_label.grid(row = 3, column = 1, pady = (0, 5))
        self.email_entry = Entry(frame, font = ('Ariel', 20), fg = 'grey', width = 30)
        self.email_entry.grid(row = 3, column = 2, sticky = 'w', padx = (200, 0))
        self.email_entry.bind("<FocusIn>", lambda a: temp(self.email_entry, ' email', 1))
        self.email_entry.bind("<FocusOut>", lambda a: temp(self.email_entry, ' email', 2))
        self.email_entry.insert(0, ' email')
        
        mobile_label = Label(frame, text = 'Mobile number', bg = theme, font = ('Ariel', 20))
        mobile_label.grid(row = 4, column = 1, pady = (0, 5))
        self.mobile_entry = Entry(frame, font = ('Ariel', 20), fg = 'grey')
        self.mobile_entry.grid(row = 4, column = 2, sticky = 'w', padx = (200, 0))
        self.mobile_entry.bind("<FocusIn>", lambda a: temp(self.mobile_entry, ' mobile number', 1))
        self.mobile_entry.bind("<FocusOut>", lambda a: temp(self.mobile_entry, ' mobile number', 2))
        self.mobile_entry.insert(0, ' mobile number')

        def update_price():
            mul = {' Economy': 1, ' Premium Economy': 1.8, ' Business': 3.8, ' First': 9.3}
            self.price[1] = round(mul[class_spinbox.get()] * int(pass_spinbox.get()) * self.price[0])
            price_label.configure(text = f'Price: {self.symbol}{str(self.price[1])}')
        passengers_label = Label(frame, text = 'Passengers', bg = theme, font = ('Ariel', 20))
        passengers_label.grid(row = 5, column = 1, pady = (0, 5))
        pass_spinbox = Spinbox(frame, from_ = 1, to = 10,
        font = ('Ariel', 20), width = 2, command = update_price)
        pass_spinbox.grid(row = 5, column = 2, sticky = 'w', padx = (200, 0))

        class_label = Label(frame, text = 'Class', bg = theme, font = ('Ariel', 20))
        class_label.grid(row = 6, column = 1, pady = (0, 5))
        classes = [' Economy', ' Premium Economy', ' Business', ' First']
        class_spinbox = Spinbox(frame, values = classes,
        font = ('Ariel', 20), width = 16, command = update_price)
        class_spinbox.grid(row = 6, column = 2, sticky = 'w', padx = (200, 0))

        price_label = Label(frame, text = 'Price: ' + self.symbol + str(self.price[1]),
        font = ('Ariel', 20), bg = theme)
        price_label.grid(row = 7, column = 1, pady = (0, 5))
        
        book_button = Button(frame, text = 'Book flight', font = ('Ariel', 20), command = self.ticket)
        book_button.grid(row = 8, column = 1, columnspan = 2, pady = (10, 20))

    def ticket(self):
        #if self.valid_details():
            for item in self.main_frame.winfo_children():
                item.destroy()
            def show_cords(event):
                print(event.x, event.y)
            self.board_pass = PhotoImage(file = 'images/Boarding_pass.png')
            canvas = Canvas(self.main_frame, width = 1366, height = 698)
            canvas.grid(row = 1, column = 1)
            canvas.bind('<Button-1>', lambda event: show_cords(event))
            canvas.create_image(0, 0, image = self.board_pass, anchor = NW)
            canvas.create_text(100, 100, text = 'hello', font = ('Ariel', 20))
            
mygui = Gui()
mygui.logo()
window.mainloop()

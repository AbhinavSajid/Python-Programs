from tkinter import *
import math
import time
import random
import mysql_api as sql

#window
window = Tk(screenName=None, baseName=None, className='Tk', useTk=1)
#window.wm_attributes("-transparentcolor", '#eeefff')
window.bind('<Escape>', lambda event: window.destroy())
window.title('Flight booking')
window.geometry('1366x768')
window.minsize(960, 540)
#window.attributes('-fullscreen', True)

class Gui:
    def __init__(self):
        self.days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30 ,
        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
        self.month_num = ['January', 'February', 'March', 'April', 'May', 'June', 'July',
        'August', 'September', 'October', 'November', 'December']
        self.currency = {'Indian Rupee': ('₹', 1), 'US Dollar': ('$', 0.012), 'Euro': ('€', 0.010)}
        self.chosen_cur = 'Indian Rupee'
        self.email = ''
        self.to_ = self.from_ = self.full_date = ''
        self.travel_date_entry = Entry()
        self.travel_date_entry.destroy()
        self.frame2 = Entry()
        self.frame2.destroy()
        self.menu_frame = Frame()
        self.menu_frame.destroy()
        
    def travel_map(self, sno):
        for item in self.main_frame.winfo_children():
            item.destroy()
        canvas = Canvas(self.main_frame)
        canvas.grid(row = 1, column = 1)
        canvas.config(width = 1008, height = 621)
        self.world_image = PhotoImage(file = 'images/World_map.png')
        canvas.create_image(0, 0, anchor = NW, image = self.world_image)
        values = sql.ticket_get_values(sno)
        #print(values)
        info1 = sql.country_info(values[4])
        info2 = sql.country_info(values[5])
        
        x = 1008
        y = 621
        lat1 = -info1[4] *(51.6/15)
        long1 = info1[5] * (41.954/15)
        lat2 = -info2[4] *(51.6/15)
        long2 = info2[5] * (41.954/15)
        c = [504 + long1, 310.5 + lat1, 505 + long2, 310.5 + lat2]
        t = math.atan2(c[3] - c[1], c[2] - c[0])
        d = 10
        xC = (c[0] + c[2])/2 + d * math.sin(t)
        yC = (c[1] + c[3])/2 - d * math.cos(t)
        xD = (c[0] + c[2])/2 - d * math.sin(t)
        yD = (c[1] + c[3])/2 + d * math.cos(t)

        canvas.create_line((c[0], c[1]), (xC, yC), (c[2], c[3]),
        smooth = True, width = 3, fill = 'red')
        def show_cords(event):
            print(event.x, event.y)
        canvas.bind('<Button-1>', show_cords)
        
    def flight_time(self, duration):
        time = []
        mins = round(random.randint(0, 57) / 5) * 5
        hrs = random.randint(0, 23)
        hrs_prefix = '0' if hrs < 10 else ''
        mins_prefix = '0' if mins < 10 else ''
        time.extend([hrs_prefix + str(hrs), mins_prefix + str(mins)])
        hrs = round(int(time[0]) + duration // 60)
        mins = round(int(time[1]) + duration % 60)
        if mins > 59:
            hrs += 1
            mins -= 60
        new_day = False
        if hrs > 23:
            hrs = hrs - 24
            new_day = True
        hrs_prefix = '0' if hrs < 10 else ''
        mins_prefix = '0' if mins < 10 else ''
        time.extend([hrs_prefix + str(hrs), mins_prefix + str(mins), new_day])
        return time
            
        return (random.randint(0,23),mins)
    def add_text(self, widget, text, color):
        widget.delete(0, "end")
        if color is not False:
            widget.config(fg = color)
        if text is not False:
            widget.insert(0, text)

# startup logo ======================================================================        
    def logo(self):
        self.container = Frame(window)
        self.container.pack(fill = 'both', expand = True)
        self.container.grid_columnconfigure(1, weight = 1)
        self.container.grid_rowconfigure(2, weight = 1)
        self.logo_image = PhotoImage(file = 'images/Skyline_logo.png')
        label = Label(self.container, image = self.logo_image)
        label.pack(fill = 'both', expand =  True)
        def proceed():
            label.destroy()
            self.create_tab()
            self.home_page()
        label.after(250, proceed)

# login/sign up =========================================================================
    def valid_user(self, mode):
        theme='light blue'
        entered_email = self.email_entry.get().strip().lower()
        if mode == 'sign_up':
            if entered_email not in sql.get_emails():
                if 9 > len(self.pass_entry.get()) > 3:
                    values = (sql.sno('users'), self.user_entry.get().strip(), self.email_entry.get().strip(),
                    self.pass_entry.get())
                    sql.enter_users(values)
                    self.home_page()
        else:
            if entered_email in sql.get_emails():
                if self.pass_entry.get().strip() == sql.users_get_values(self.email_entry.get().strip())[3]:
                    self.email = entered_email
                    self.home_page()
                else:
                    error_label=Label(self.frame1,text='incorrect password', bg=theme,fg='red')
                    error_label.grid(row=3,column=3)
                    
    def login_page(self, mode = 'login'):
        def temp(widget, text, mode):
            var = widget.get()
            if mode == 1:
                if widget == self.pass_entry:
                    if len(var) > 0:
                        if len(var) > 8 or not (var[-1].isdecimal() or var[-1].isalpha()):
                            if var[:-1] != text:
                                self.add_text(widget, var[:-1], 'black')
                            else:
                                self.add_text(widget, text, 'grey')                          
                elif widget == self.email_entry:
                    if var.count('@') > 1:
                        self.add_text(widget, var[:-1], 'black')
                elif widget == self.user_entry:
                    if not (var[-1].isdecimal() or var[-1].isalpha()):
                        if var[:-1] != text:
                            self.add_text(widget, var[:-1], 'black')
                        else:
                            self.add_text(widget, text, 'grey')
                if widget != self.pass_entry:
                    if len(var) == 0 or var[0] != ' ':
                        self.add_text(widget, ' ' + var, 'black')
                if var == text:
                    if widget != self.pass_entry:
                        self.add_text(widget, ' ', 'black')
                    else:
                        widget.config(show = '*')
                        self.add_text(widget, '', 'black')
                elif var == '':
                    if widget == self.pass_entry:
                        widget.config(show = '')
                    self.add_text(widget, text, 'grey')
                elif widget.cget('fg') == 'grey':
                    self.add_text(widget, ' ', 'black')
                    if widget == self.pass_entry:
                        widget.config(show = '*')
                        self.add_text(widget, '', 'black')
            if mode == 2:
                if (len(widget.get()) > 0 and widget.get()[0] != ' ' and
                widget != self.pass_entry):
                    self.add_text(widget, ' ' + widget.get(), 'black')
                if widget.get() == ' ' or widget.get() == '':
                    if widget == self.pass_entry:
                        widget.config(show = '')
                    self.add_text(widget, text, 'grey')
        for item in self.main_frame.winfo_children():
            item.destroy()
        theme = 'light blue'
        self.frame1 = Frame(self.main_frame, bg = theme)
        self.frame1.grid(row = 1, column = 1, padx = 170, pady = (90, 0), sticky = 'we')
        self.frame1.grid_columnconfigure(3, weight = 1)
        
        if mode == 'sign_up':
            user_label = Label(self.frame1, text = 'Username', font = ('Ariel', 20), bg = theme)
            user_label.grid(row = 2, column = 1, padx = (190, 0), pady = (20, 0))
            self.user_entry = Entry(self.frame1, font = ('Ariel', 20), fg = 'grey', width = 30)
            self.user_entry.grid(row = 2, column = 2, padx = (20, 0), pady = (20, 0))
            self.user_entry.bind("<FocusIn>", lambda a: temp(self.user_entry, ' username', 1))
            self.user_entry.bind("<FocusOut>", lambda a: temp(self.user_entry, ' username', 2))
            self.user_entry.bind("<KeyRelease>", lambda a: temp(self.user_entry, ' username', 1))
            self.user_entry.insert(0, ' username')

            txt = 'Already have an account?  Login instead'
            suggest_login = Button(self.frame1, text = txt, font = ('Ariel', 12),
            bg = theme, relief = 'flat', command = self.login_page, fg = 'blue')
            suggest_login.grid(row = 5, column = 1, columnspan = 3, pady = (10, 0))
            text = 'Sign Up'
            row = 1
        else:
            txt = "Don't have an account?  Sign up instead"
            suggest_login = Button(self.frame1, text = txt, font = ('Ariel', 12), bg = theme,
            relief = 'flat', command = lambda: self.login_page('sign_up'), fg = 'blue')
            suggest_login.grid(row = 4, column = 1, columnspan = 3, pady = (10, 0))
            text = 'Login'
            row = 0
        main_label = Label(self.frame1, text = text, font = ('Ariel', 25, 'bold'), bg = theme)
        main_label.grid(row = 1, column = 1, columnspan = 3, pady = (30, 20))
        
        email_label = Label(self.frame1, text = 'Email', font = ('Ariel', 20), bg = theme)
        email_label.grid(row = 2 + row, column = 1, padx = (190, 0), pady = (20, 0))
        self.email_entry = Entry(self.frame1, font = ('Ariel', 20), fg = 'grey', width = 30)
        self.email_entry.grid(row = 2 + row, column = 2, padx = (20, 0), pady = (20, 0))
        self.email_entry.bind("<FocusIn>", lambda a: temp(self.email_entry, ' email', 1))
        self.email_entry.bind("<FocusOut>", lambda a: temp(self.email_entry, ' email', 2))
        self.email_entry.bind("<KeyRelease>", lambda a: temp(self.email_entry, ' email', 1))
        self.email_entry.insert(0, ' email')

        def show(event):
            if self.pass_entry.cget('show') == '*':
                self.pass_entry.config(show = '')
            else:
                self.pass_entry.config(show = '*')
        pass_label = Label(self.frame1, text = 'Password', font = ('Ariel', 20), bg = theme)
        pass_label.grid(row = 3 + row, column = 1, padx = (190, 0), pady = (20, 0))
        self.pass_entry = Entry(self.frame1, font = ('Ariel', 20), fg = 'grey', width = 30)
        self.pass_entry.grid(row = 3 + row, column = 2, padx = (20, 0), pady = (20, 0))
        self.pass_entry.bind("<FocusIn>", lambda a: temp(self.pass_entry, ' password', 1))
        self.pass_entry.bind("<FocusOut>", lambda a: temp(self.pass_entry, ' password', 2))
        self.pass_entry.bind("<KeyRelease>", lambda a: temp(self.pass_entry, ' password', 1))
        self.pass_entry.bind("<Double-Button>", show)
        self.pass_entry.insert(0, ' password')
            
        login_button = Button(self.frame1, text = text, font = ('Ariel', 15),
        command = lambda: self.valid_user(mode))
        login_button.grid(row = 5 + row, column = 1, columnspan = 3, pady = (30, 40))
        
# account ================================================================================        
    def account(self):
        if self.email == '':
            self.login_page('sign_up')
        else:
            for item in self.main_frame.winfo_children():
                item.destroy()
            self.main_frame.grid_columnconfigure(1, weight = 1)
            self.main_frame.grid_rowconfigure(2, weight = 1)
            
            theme = '#a631b5'
            self.frame = Frame(self.main_frame, bg = theme)
            self.frame.grid(row = 1, column = 1, pady = (60, 0), padx = 170, sticky = 'we')
            self.frame.grid_columnconfigure(1, weight = 1)

            
            info = sql.users_get_values(self.email)
            user_label = Label(self.frame, text = info[1], bg = theme,
            font = ('Ariel', 25, 'bold'),fg='white')
            user_label.grid(row = 1, column = 1, pady = (20, 0))

            email_label = Label(self.frame,text=info[2],bg=theme,font=('Ariel',17),fg='white')
            email_label.grid(row = 2, column = 1)
            
            history_label = Label(self.frame, text = 'Flight History',
            font = ('Ariel', 20, 'bold'),bg = theme, fg = '#00ffbf')
            history_label.grid(row = 3,column = 1,pady = (50, 10))

            values = sql.flight_history(self.email)
            ticket_button = {}
            route_button = {}
            pady = 0
            for i in range(len(values)):
                value = values[i]
                theme = 'light blue'
                if i == len(values) - 1:
                    pady = 40
                frame1 = Frame(self.frame, bg = theme, height = 130)
                frame1.grid(row = 4 + i,column = 1, pady = (20, pady))
                
                date_label = Label(frame1, bg = theme, text = value[6], font = ('Ariel', 20))
                date_label.grid(row = 1, column = 1, rowspan = 2, padx = 15)

                from_time_label = Label(frame1, text = value[10], font = ('Ariel', 20, 'bold'), bg = theme)
                from_time_label.grid(row = 1, column = 2, pady = (40, 0), padx = (20, 0))
                
                from_label = Label(frame1, text = value[4],font = ('Ariel', 15), bg = theme)
                from_label.grid(row = 2, column = 2, pady = (0, 40), padx = (20, 0))
                
                to_time_label = Label(frame1, text = value[11],font = ('Ariel', 20, 'bold'), bg = theme)
                to_time_label.grid(row = 1, column = 3, pady = (40, 0), padx = (5, 0))
                
                to_label = Label(frame1, text = value[5],font = ('Ariel', 15), bg = theme)
                to_label.grid(row = 2, column = 3, pady = (0, 40), padx = (5, 0))

                price_label = Label(frame1, text = self.currency[self.chosen_cur][0] + value[12],
                bg = theme, font = ('Ariel', 20))
                price_label.grid(row  = 1, column = 4, rowspan = 2, padx = (25, 0))

                self.airline_img = {}
                self.airline_img[i] = PhotoImage(file = f'images/{value[7]}_thumbnail.png')
                airline_pic = Label(frame1, image = self.airline_img[i])
                airline_pic.grid(column = 5, row = 1, rowspan = 2, padx = (15, 15), pady = 15)
                airline_pic.photo = self.airline_img[i]

                def action(x = i, mode = 1):
                    self.sno = values[x][0]
                    if mode == 1:
                        self.ticket('verified')
                    else:
                        self.travel_map(self.sno)
                    
                ticket_button[i] = Button(frame1, text = 'Ticket', font = ('Ariel', 13),
                bg = theme, command = action, width = 10)
                ticket_button[i].grid(column = 7, row = 1, padx = (20, 35), pady = (20, 0))

                route_button[i] = Button(frame1, text = 'Flight route', font = ('Ariel', 13),
                bg = theme, command = lambda: action(mode = 2), width = 10)
                route_button[i].grid(column = 7, row = 2, padx = (20, 35), pady = (0, 20))
                
# tab ===============================================================================================
    def menubar(self):       
        if self.menu_frame.winfo_exists() == False:
            self.menu_frame = Frame(self.main_frame)
            self.menu_frame.place(x = self.menu.winfo_rootx() - 7, y = 0)
            sign_up_button = Button(self.menu_frame, text = 'Sign Up', font = ('Ariel', 13),
            command = lambda: [self.login_page('sign_up'), self.menu_frame.destroy()])
            sign_up_button.grid(row = 1, column = 1)
            login_button = Button(self.menu_frame, text = 'Login', font = ('Ariel', 13),
            command = lambda: [self.login_page(), self.menu_frame.destroy()])
            login_button.grid(row = 2, column = 1, sticky = 'we')
            account_button = Button(self.menu_frame, text = 'Account', font = ('Ariel', 13),
            command = lambda: [self.account(), self.menu_frame.destroy()])
            account_button.grid(row = 3, column = 1, sticky = 'we')
        else:
            self.menu_frame.destroy()
            
    def create_tab(self):
        for item in self.container.winfo_children():
            item.destroy()
        self.tab = Frame(self.container, height = 70 , bg = 'blue')
        self.tab.grid(row = 1, column = 1, sticky = 'new')

        self.main_frame = Frame(self.container)
        self.main_frame.grid(row = 2, column = 1, sticky = 'nsew')
        self.main_frame.grid_propagate(False)
        self.main_frame.grid_columnconfigure(1, weight = 1)
        self.main_frame.grid_rowconfigure(2, weight = 1)
        
        airline = Label(self.tab, text = 'Skyline', fg = 'white',
        bg = 'blue', font = ('Ariel', 25))
        airline.grid(row = 1, column = 2)
        
        slogan = Label(self.tab, text='Discover the world',
        font = ('Ariel', 10, 'bold'), fg = 'white', bg = 'blue')
        slogan.grid(row=1,column=3,padx=5,pady=(0,5))

        file = 'images/Globe_logo.gif'
        frame_count = 120
        frames = [PhotoImage(file = file,format = f'gif -index {i}') for i in range(frame_count)]
        count = 0
        logo_label = Label(self.tab, image = '', bg = 'blue')
        logo_label.grid(column = 1, row = 1, padx = (10,0))
        def animation(count):
            img = frames[count]
            logo_label.configure(image = img)
            count += 1
            if count == frame_count:
                count = 0
            window.after(100, animation, count)
        animation(0)
        
        home = Button(self.tab, text = 'Home page', bg = 'blue', fg = 'white', height = 1,
        relief = 'flat', font = ('Ariel', 12), command = self.home_page)
        home.grid(column = 4, row = 1, padx = (500,0), pady = 10)
        
        book = Button(self.tab, text = 'Book flight', bg = 'blue', fg = 'white', height = 1,
        relief = 'flat', font = ('Ariel', 12), command = self.book_flight)
        book.grid(column = 5, row = 1, padx = (20,0), pady = 10)
        
        flights = Button(self.tab, text = 'Flights', bg = 'blue', fg = 'white', height = 1,
        relief = 'flat', font = ('Ariel', 12), command = self.search_flights)
        flights.grid(column = 6, row = 1, padx = (20,0), pady = 10)

        self.menu = Button(self.tab, bg = 'blue', height = 1, relief = 'flat',text = 'Menu',
        font = ('Ariel', 12), fg = 'white', command = self.menubar)
        self.menu.grid(column = 7, row = 1, padx = (20,0), pady = 10)
        
# home page ==================================================================================
    def home_page(self):
        for item in self.main_frame.winfo_children():
            item.destroy()

        self.sunset_image = PhotoImage(file = 'images/Airplane_sunset.png')
        self.display = Label(self.main_frame, image = self.sunset_image, height = 550)
        self.display.grid(row = 2, column = 1, pady = (10,0), sticky = 'we', padx = 110)

# booking ===============================================================================
    def pick_date(self):
        self.frame1 = Frame(self.tab2, bg = 'grey')
        self.frame1.grid(row = 2, column = 3, sticky = 'nsew', pady = (5,0))
        
        self.day_spinbox = Spinbox(self.frame1, from_ = 1, to = 31, font = ('Ariel', 15),
        width = 2, wrap = True, command = self.update_date)
        self.day_spinbox.grid(row = 1, column = 1, padx = (60,4), sticky = ('ns'))
        
        self.month_spinbox = Spinbox(self.frame1, values = self.month_num,
        font = ('Ariel', 15), width = 9, command = self.update_date)
        self.month_spinbox.grid(row = 1, column = 2, padx = 4)
        
        self.year_spinbox = Spinbox(self.frame1, from_ = time.localtime()[0], to = time.localtime()[0] + 1,
        font = ('Ariel', 15),width = 4, wrap = True, command = self.update_date)
        self.year_spinbox.grid(row = 1, column = 3, padx = 4)
        
    def valid_destination(self):
        self.from_ = self.from_var.get().strip().capitalize()
        self.to_ = self.to_var.get().strip().capitalize()
        if self.to_ == self.from_:
            return False
        if self.to_ in sql.fetch_countries() and self.from_ in sql.fetch_countries():
            return True
        return False
        
    def valid_date(self):
        self.month = self.travel_date_entry.get()[5:-5]
        self.year = self.travel_date_entry.get()[-4:]
        if not (self.year == str(time.localtime()[0]) or self.year == str(time.localtime()[0] + 1)):
            return False
        self.days[2] == '28'
        if int(self.year)%4 == 0:
            self.days[2] = '29'
        if self.month in self.month_num:
            self.month = self.month_num.index(self.month) + 1
        else:
            return False
        self.day = int(self.travel_date_entry.get()[0:2])
        if self.day > int(self.days[self.month]):
            return False
        if self.year == str(time.localtime()[0]):
            if self.month == time.localtime()[1]:
                if self.day <= time.localtime()[2]:
                    return False
            if self.month < time.localtime()[1]:
                return False
        self.full_date = self.travel_date_entry.get()
        return True
        
    def update_date(self):
        self.days[2] = 28
        if int(self.year_spinbox.get())%4 == 0:
            self.days[2] = 29
        self.travel_date_entry.delete(0, 'end')
        day = int(self.day_spinbox.get())
        if day > self.days[self.month_num.index(self.month_spinbox.get()) + 1]:
            day = self.days[self.month_num.index(self.month_spinbox.get()) + 1]
        ordinals = {1: 'st ', 2: 'nd ', 3: 'rd '}
        ordinal = 'th '
        if day in ordinals:
            ordinal = ordinals[day]
        if day < 10:
            day = ' ' + str(day)
        self.travel_date_entry.insert(1, str(day) + ordinal +
        self.month_spinbox.get() + ' ' + self.year_spinbox.get())
        self.date_month = self.month_num.index(self.month_spinbox.get()) + 1
        self.date_day = day
        self.date_year = int(self.year_spinbox.get())

    def book_flight(self):
        for item in self.main_frame.winfo_children():
            item.destroy()
        frame = Frame(self.main_frame, bg = 'grey', height = 200)
        frame.grid(row = 1, column = 1, pady = (100, 0), sticky = 'we', padx = 110)
        frame.grid_columnconfigure(1, weight = 1)
        frame.grid_rowconfigure(2, weight = 1)
        frame.grid_propagate(False)

        tab1 = Frame(frame, bg = 'blue', height = 70)
        tab1.grid(sticky = 'new', row = 1, column = 1)
        tab1.grid_propagate(False)

        from_ = Label(tab1, text = 'From', font = ('Ariel', 20), bg = 'blue', fg = 'white')
        from_.grid(column = 1, row = 1, pady = 15, padx = (100))
        to = Label(tab1, text = 'To', font = ('Ariel', 20), bg = 'blue', fg = 'white')
        to.grid(column = 2, row = 1, padx = (90, 0))
        travel_date = Label(tab1, text = 'Travel Date', font = ('Ariel', 20),
        bg = 'blue', fg = 'white')
        travel_date.grid(column = 3, row = 1, padx = (210, 0))
        
        self.tab2 = Frame(frame, bg = 'grey')
        self.tab2.grid(sticky = 'nsew', row = 2, column = 1)
        self.tab2.grid_propagate(False)
        def temp(widget, text, mode, xcor):
            if mode == 1:
                if not self.frame2.winfo_exists():
                    self.frame2 = Frame(self.main_frame)
                    self.frame2.place(x = xcor, y = 250)
                else:
                    for item in self.frame2.winfo_children():
                        item.destroy()
                country = sql.fetch_countries()
                if self.to_var.get().strip() in country:
                    country.remove(self.to_var.get().strip())
                if self.from_var.get().strip() in country:
                    country.remove(self.from_var.get().strip())
                button_dict = {}
                for i in country:
                    def action(x = i):
                        self.add_text(widget, ' ' + x, False)
                        self.frame2.destroy()
                    button_dict[i] = Button(self.frame2, text = i, font = ('Ariel', 15),
                    width = 10, command = action)
                    button_dict[i].grid(column = 1, row = country.index(i))
            if mode == 1 and widget.get() == text:
                self.add_text(widget, False, 'black')
            elif widget.get() == '':
                self.add_text(widget, text, 'grey')
            elif widget.cget('fg') == 'grey':
                self.add_text(widget, widget.get()[5:], 'black')
            if widget.get()[-2:] == '  ':
                self.add_text(widget, widget.get()[:-1], 'black')
            if len(widget.get()) != 0 and widget.get()[0] != ' ':
                self.add_text(widget, ' ' + widget.get(), 'black')
            if mode == 2:
                self.frame2.destroy()
                if len(widget.get()) > 0 and widget.get()[0] != ' ':
                    self.add_text(widget, ' ' + widget.get(), 'black')
        def temp_travel(mode, text):
            if mode == 1:
                self.pick_date()
                if not self.valid_date():
                    self.add_text(self.travel_date_entry, False, 'black')
            if mode == 2:
                if not self.valid_date():
                    self.add_text(self.travel_date_entry, text, 'grey')
                for item in self.frame1.winfo_children():
                    item.destroy()
        self.from_var = StringVar()
        from_entry = Entry(self.tab2, font = ('Ariel', 20), fg = 'grey', textvariable = self.from_var, width = 15)
        from_entry.grid(row = 1, column = 1,pady = (40,0), padx = (20, 0))
        from_entry.insert(0, ' from')
        from_entry.bind("<FocusIn>", lambda self: temp(from_entry, ' from', 1, 250))
        from_entry.bind("<FocusOut>", lambda self: temp(from_entry, ' from', 2, 250))
        from_entry.bind("<KeyRelease>", lambda self: temp(from_entry, ' from', 1, 250))

        self.to_var = StringVar()
        to_entry = Entry(self.tab2, font = ('Ariel', 20), fg = 'grey', textvariable = self.to_var, width = 15)
        to_entry.grid(row = 1, column = 2, padx = (20, 0), pady = (40,0))
        to_entry.insert(0, ' to')
        to_entry.bind("<FocusIn>", lambda self: temp(to_entry, ' to', 1, 500))
        to_entry.bind("<FocusOut>", lambda self: temp(to_entry, ' to', 2, 500))
        to_entry.bind("<KeyRelease>", lambda self: temp(to_entry, ' to', 1, 250))

        self.travel_date_entry = Entry(self.tab2, font = ('Ariel', 20), fg = 'grey')
        self.travel_date_entry.grid(row = 1, column = 3, padx = (30, 0), pady = (40,0))
        self.travel_date_entry.insert(0, ' dd/mm/yyyy')
        self.travel_date_entry.bind("<FocusIn>", lambda self: temp_travel(1, ' dd/mm/yyyy'))
        self.travel_date_entry.bind("<FocusOut>", lambda self: temp_travel(2, ' dd/mm/yyyy'))
        
        search = Button(self.tab2, text = 'Search', height = 2, width = 10, command = self.search_flights)
        search.grid(row = 1, column = 4, padx = (30,0), pady = (40,0))
        
        if self.full_date != '':
            self.add_text(self.travel_date_entry, self.full_date, 'black')

        if self.to_ != self.from_:
            self.add_text(to_entry, ' ' + self.to_, 'black')
            self.add_text(from_entry, ' ' + self.from_, 'black')
            
# flights ===========================================================================================
    def search_flights(self):
        if self.travel_date_entry.winfo_exists() and self.valid_date() and self.valid_destination():
            for item in self.main_frame.winfo_children():
                item.destroy()
            self.main_frame.grid_rowconfigure(4, weight = 1)
            self.main_frame.grid_columnconfigure(1, weight = 1)
            button_dict = {}
            info = {}
            def get_flights(row):
                t = sql.country_info(self.from_)
                long1 = t[5]
                lat1 = t[4]
                t = sql.country_info(self.to_)
                long2 = t[5]
                lat2 = t[4]
                dist = (((long2 - long1) ** 2 + (lat2 - lat1) ** 2) ** (0.5)) * 111
                price = round(dist * 5 + random.randint(0, round(dist/3)))
                self.chosen_cur = 'Indian Rupee'
                self.symbol = self.currency[self.chosen_cur][0]
                duration = round((dist / 10 + random.randint(-20,20)) / 5) * 5
                time = self.flight_time(duration)
                airlines = ['Skyline', 'Delta', 'Qatar airways', 'Lufthansa']
                airline = random.choice(airlines)
                info[row] = (price, str(round(duration//60)) + 'h ' +
                str(round(duration % 60)) + 'm', time, airline)

                pady = 40 if row == 1 else 0
                theme = 'light blue'
                frame1 = Frame(self.main_frame, height = 130, bg = theme)
                frame1.grid(row = row + 1, column = 1, sticky = 'we', padx = 150, pady = (pady, 0))
                frame1.grid_propagate(False)

                
                self.airline_img = {}
                self.airline_img[row] = PhotoImage(file = f'images/{airline.strip()}_thumbnail.png')
                airline_pic = Label(frame1, image = self.airline_img[row])
                airline_pic.grid(column = 1, row = 1, rowspan = 2, padx = (15, 0), pady = 15)
                airline_pic.photo = self.airline_img[row]

                
                airline_label = Label(frame1, text = airline.replace(' ', '\n', 1),
                bg = theme, font = ('Ariel', 20), fg = 'dark blue')
                airline_label.grid(row = 1, column = 2, padx = (10,0), pady = (0, 5), rowspan = 2)
                
                from_time_label = Label(frame1, text = time[0] + ':' + time[1],
                font = ('Ariel', 20, 'bold'), bg = theme)
                from_time_label.grid(row = 1, column = 3, pady = (30, 0), padx = (60, 0))
                
                from_label = Label(frame1, text = self.from_,
                font = ('Ariel', 15), bg = theme)
                from_label.grid(row = 2, column = 3, padx = (60, 0), pady = (0, 30))

                duration_label = Label(frame1, text = str(round(duration//60)) + 'h ' +
                str(round(duration % 60)) + 'm', font = ('Ariel', 13), bg = theme)
                duration_label.grid(row = 1, column = 4, rowspan = 2, padx = 70)
                
                to_time_label = Label(frame1, text = time[2] + ':' + time[3],
                font = ('Ariel', 20, 'bold'), bg = theme)
                to_time_label.grid(row = 1, column = 5, pady = (30,0))
                
                to_label = Label(frame1, text = self.to_,
                font = ('Ariel', 15), bg = theme)
                to_label.grid(row = 2, column = 5, pady = (0, 30))

                price_label = Label(frame1, text = self.symbol +
                str(price * self.currency[self.chosen_cur][1]), bg = theme, font = ('Ariel', 20))
                price_label.grid(row  =1, column = 6, rowspan = 2, padx = (60,0))

                def action(x = row):
                    self.info = info[row]
                    self.booking_details()
                    
                button_dict[i] = Button(frame1, text = 'Book Flight', command = action,
                font = ('Ariel', 15), relief = GROOVE, bg = theme)
                button_dict[i].grid(row = 1, rowspan = 2, column = 7, padx = (10, 0))

            for i in range(1,random.randint(3,4)):
                get_flights(i)
                
# booking details ====================================================================
    def valid_details(self):
        theme = 'light blue'
        for item in self.frame.winfo_children():
            if item.grid_location(0, 0)[0] == 3:
                item.destroy()
        d = {1: self.name_entry, 2: self.email_entry, 3: self.mobile_entry}
        for i in range(1, 4):
            if i == 1:
                l_name = d[i].get().split()
                def wrong_name():
                    error_label = Label(self.frame, text = 'enter valid full name', bg = theme, fg = 'red')
                    error_label.grid(row = 2, column = 3)
                if not 4 > len(l_name) > 1:
                    wrong_name()
                    return False
                for i in l_name:
                    if len(i) < 2:
                        wrong_name()
                        return False
            elif i == 2:
                email = d[i].get().strip()
                if email not in sql.get_emails():
                    error_label = Label(self.frame, text = 'signin', bg = theme, fg = 'red')
                    error_label.grid(row = 3, column = 3)
                    return False
            elif i == 3:
                num = ''.join(str(d[i].get()).split())
                if len(num) != 10 or not num.isdecimal():
                    error_label = Label(self.frame, text = 'invalid number', bg = theme, fg = 'red')
                    error_label.grid(row = 4, column = 3)
                    return False
                
        self.seat = str(random.randint(1,100)) + random.choice(['a','b','c'])
        self.sno = sql.sno('ticket')
        values = (self.sno,self.name_entry.get().strip(),self.mobile_entry.get().strip(),self.email_entry.get().strip(),
        self.from_,self.to_,self.full_date, self.info[3], self.pass_spinbox.get(),self.seat,self.info[2][0]+':'+self.info[2][1],
        self.info[2][2]+':'+self.info[2][3],self.price[1],self.class_spinbox.get(),
        f'{self.year}-{self.month}-{self.day}')
        sql.enter_ticket(values)
        return True

    def booking_details(self):
        theme = 'light blue'
        self.price = [self.info[0], self.info[0]]
        for item in self.main_frame.winfo_children():
                item.destroy()
        self.frame = Frame(self.main_frame, bg = theme)
        self.frame.grid(row = 1, column = 1, sticky = 'we', padx = 130, pady = (30, 0))
        self.frame.grid_columnconfigure(3, weight = 1)
        self.frame.grid_rowconfigure(8, weight = 1)

        def temp(widget, text, mode):
            var = widget.get()
            if mode == 1:
                if var == '':
                    self.add_text(widget, text, 'grey')
                elif var == text:
                    self.add_text(widget, ' ', 'black')
                else:
                    if widget.cget('fg') == 'grey':
                        self.add_text(widget, ' ', 'black')
                    if len(var) != 0 and var[0] != ' ':
                        self.add_text(widget, ' ' + var, 'black')
                    if widget == self.mobile_entry:
                        no = var.replace(' ', '')
                        if not no.isdecimal() or len(no) > 10:
                            while not no.isdecimal() or len(no) > 10:
                                var = var[:-1]
                                no = var.replace(' ', '')
                                if len(var) == 0:
                                    break
                            self.add_text(widget, var, 'black')
                    elif widget == self.name_entry:
                        if not var.replace(' ', '').isalpha():
                            self.add_text(widget, var[:-1], 'black')
                    elif var.count('@') > 1:
                        self.add_text(widget, var[:-1], 'black')
                if var[-2:] == '  ':
                    self.add_text(widget, var[:-1], 'black')
            elif mode == 2:
                if len(var) == 1:
                    self.add_text(widget, text, 'grey')
                    
        main_label = Label(self.frame, text = 'Booking Details', bg = theme, font = ('Ariel', 25, 'bold'))
        main_label.grid(row = 1, column = 1, padx = (20, 20), pady = (20, 20))
        
        name_label = Label(self.frame, text = 'Full name', font = ('Ariel', 20), bg = theme)
        name_label.grid(row = 2, column = 1, pady = (0, 5))
        self.name_entry = Entry(self.frame, font = ('Ariel', 20), fg = 'grey', width = 30)
        self.name_entry.grid(row = 2, column = 2, sticky = 'w', padx = (200, 0))
        self.name_entry.bind("<FocusIn>", lambda a: temp(self.name_entry, ' full name', 1))
        self.name_entry.bind("<FocusOut>", lambda a: temp(self.name_entry, ' full name', 2))
        self.name_entry.bind("<KeyRelease>", lambda a: temp(self.name_entry, ' full name', 1))
        self.name_entry.insert(0, ' full name')

        email_label = Label(self.frame, text = 'Email', bg = theme, font = ('Ariel', 20))
        email_label.grid(row = 3, column = 1, pady = (0, 5))
        self.email_entry = Entry(self.frame, font = ('Ariel', 20), fg = 'grey', width = 30)
        self.email_entry.grid(row = 3, column = 2, sticky = 'w', padx = (200, 0))
        self.email_entry.bind("<FocusIn>", lambda a: temp(self.email_entry, ' email', 1))
        self.email_entry.bind("<FocusOut>", lambda a: temp(self.email_entry, ' email', 2))
        self.email_entry.bind("<KeyRelease>", lambda a: temp(self.email_entry, ' email', 1))
        self.email_entry.insert(0, ' email')
        
        mobile_label = Label(self.frame, text = 'Mobile number', bg = theme, font = ('Ariel', 20))
        mobile_label.grid(row = 4, column = 1, pady = (0, 5))
        self.mobile_entry = Entry(self.frame, font = ('Ariel', 20), fg = 'grey')
        self.mobile_entry.grid(row = 4, column = 2, sticky = 'w', padx = (200, 0))
        self.mobile_entry.bind("<FocusIn>", lambda a: temp(self.mobile_entry, ' mobile number', 1))
        self.mobile_entry.bind("<FocusOut>", lambda a: temp(self.mobile_entry, ' mobile number', 2))
        self.mobile_entry.bind("<KeyRelease>", lambda a: temp(self.mobile_entry, ' mobile number', 1))
        self.mobile_entry.insert(0, ' mobile number')

        def update_price():
            mul = {' Economy': 1, ' Premium Economy': 1.8, ' Business': 3.8, ' First': 9.3}
            self.price[1] = round(mul[self.class_spinbox.get()] * int(self.pass_spinbox.get()) * int(self.price[0]))
            price_label.configure(text = f'Price: {self.symbol}{str(self.price[1])}')
            
        passengers_label = Label(self.frame, text = 'Passengers', bg = theme, font = ('Ariel', 20))
        passengers_label.grid(row = 5, column = 1, pady = (0, 5))
        self.pass_spinbox = Spinbox(self.frame, from_ = 1, to = 10,
        font = ('Ariel', 20), width = 2, command = update_price)
        self.pass_spinbox.grid(row = 5, column = 2, sticky = 'w', padx = (200, 0))

        class_label = Label(self.frame, text = 'Class', bg = theme, font = ('Ariel', 20))
        class_label.grid(row = 6, column = 1, pady = (0, 5))
        classes = [' Economy', ' Premium Economy', ' Business', ' First']
        self.class_spinbox = Spinbox(self.frame, values = classes,
        font = ('Ariel', 20), width = 16, command = update_price)
        self.class_spinbox.grid(row = 6, column = 2, sticky = 'w', padx = (200, 0))

        price_label = Label(self.frame, text = 'Price: ' + self.symbol +
        str(self.price[1] * self.currency[self.chosen_cur][1]),
        font = ('Ariel', 20), bg = theme)
        price_label.grid(row = 7, column = 1, pady = (0, 5))
        
        book_button = Button(self.frame, text = 'Book flight', font = ('Ariel', 20), command = self.ticket)
        book_button.grid(row = 8, column = 1, columnspan = 2, pady = (10, 20))

# ticket =========================================================================================
    def ticket(self, mode = 'verify'):
        if mode != 'verify' or self.valid_details():
            for item in self.main_frame.winfo_children():
                item.destroy()
            def show_cords(event):
                pass
                #print(event.x, event.y)
            self.board_pass = PhotoImage(file = 'images/Boarding_pass.png')
            canvas = Canvas(self.main_frame, width = 1366, height = 698)
            canvas.grid(row = 1, column = 1)
            canvas.bind('<Button-1>', lambda event: show_cords(event))
            canvas.create_image(0, 0, image = self.board_pass, anchor = NW)
            values = sql.ticket_get_values(self.sno)[0]
            d = {1:(127, 277, values[1]), 2:(127, 353, values[13]), 3:(127, 431, values[4]),
            4:(127, 507, values[5]), 5:(567, 277, values[14]), 6:(567, 353, 'gate'),
            7:(567, 431, values[7]), 8:(775, 277, values[10]), 9:(775, 353, values[9]),
            10:(1055, 239, values[1]), 11:(1055, 284, values[4]), 12:(1055, 330, values[5]),
            13:(1045, 377, values[14][:-3]), 14:(1203, 377, values[10]), 15:(1055, 422, 'gate'),
            16:(1203, 422, values[9]), 17:(1055, 468, values[7])}
            for i in range(1, 18):
                canvas.create_text(d[i][0], d[i][1], text = d[i][2],
                font = ('Ariel', 20), anchor = W)
            
mygui = Gui()
mygui.logo()
window.mainloop()

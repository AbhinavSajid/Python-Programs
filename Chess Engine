# Stonkfish

from timeit import default_timer as timer

bonus = {
'P' : [
    [ 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],
    [ 5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0],
    [ 1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0],
    [ 0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5],
    [ 0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0],
    [ 0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5],
    [ 0.5,  1.0,  1.0,  -2.0, -2.0,  1.0, 1.0,  0.5],
    [ 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0]
    ],
'N' : [
    [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],
    [-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0],
    [-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0],
    [-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0],
    [-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0],
    [-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0],
    [-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0],
    [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]
    ],
'B' : [
    [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],
    [-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],
    [-1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0],
    [-1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0],
    [-1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0],
    [-1.0,  1.0,  1.0,  0.5,  0.5,  1.0,  1.0, -1.0],
    [-1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0],
    [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]
    ],
'R' : [
    [ 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],
    [ 0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5],
    [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
    [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
    [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
    [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
    [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
    [ 0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0]
    ],
'Q' : [
    [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],
    [-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],
    [-1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],
    [-0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],
    [ 0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],
    [-1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],
    [-1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0],
    [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]
    ],
'K' : [
    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
    [-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],
    [-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],
    [ 2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0],
    [ 2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0]
    ]
}
piece_value = {'P':10,'N':30,'B':32.5,'R':50,'Q':90,'K':0}

board = {
    (1,1):'bR',(2,1):'bN',(3,1):'bB',(4,1):'bQ',(5,1):'bK',(6,1):'bB',(7,1):'bN',(8,1):'bR',
    (1,2):'bP',(2,2):'bP',(3,2):'bP',(4,2):'bP',(5,2):'bP',(6,2):'bP',(7,2):'bP',(8,2):'bP',
    (1,7):'wP',(2,7):'wP',(3,7):'wP',(4,7):'wP',(5,7):'wP',(6,7):'wP',(7,7):'wP',(8,7):'wP',
    (1,8):'wR',(2,8):'wN',(3,8):'wB',(4,8):'wQ',(5,8):'wK',(6,8):'wB',(7,8):'wN',(8,8):'wR',
    }

white_pieces = [(1,7),(2,7),(3,7),(4,7),(5,7),(6,7),(7,7),(8,7),
               (1,8),(2,8),(3,8),(4,8),(5,8),(6,8),(7,8),(8,8)]
black_pieces = [(1,1),(2,1),(3,1),(4,1),(5,1),(6,1),(7,1),(8,1),
               (1,2),(2,2),(3,2),(4,2),(5,2),(6,2),(7,2),(8,2)]

knight_moves = ((2,-1),(2,1),(-2,-1),(-2,1),(1,-2),(1,2),(-1,-2),(-1,2))
queen_moves = ((1,0),(-1,0),(0,1),(0,-1),(1,0),(-1,0),(0,1),(0,-1))
bishop_moves = ((1,1),(1,-1),(-1,1),(-1,-1))
rook_moves = ((1,0),(-1,0),(0,1),(0,-1))

en_passant = False
king = {'w':(5,8), 'b':(5,1)}
castle = {'w': [True,True], 'b':[True,True,]}
turn = 'w'
start = timer()

def in_check(color):
    if color == 'w':
        same_color = white_pieces
        opp_color = black_pieces
    else:
        same_color = black_pieces
        opp_color = white_pieces
    king_col = king[color][0]
    king_row = king[color][1]
    for square in opp_color:
        piece = board[square][1]
        col = square[0]
        row = square[1]
        if piece == 'P':
            if color == 'b':
                if col - king_col in (1,-1) and row == king_row + 1:
                    return True
            elif col - king_col in (1,-1) and row == king_row - 1:
                    return True
        elif piece == 'N':
            for move in knight_moves:
                if col+move[0] == king_col and row+move[1] == king_row:
                    return True
        elif piece == 'B' and +(king_row - row) == +(king_col - col):
            if king_col > col: hori = 1
            else:
                hori = -1
            if king_row > row:
                verti = 1
            else:
                verti = -1
            for i in range(7):
                col += hori
                row += verti
                if col == king_col and row == king_row:
                    return True
                if (col,row) in board:
                    break
        elif piece == 'R' and col == king_col or row == king_row:
            if king_col == col:
                hori = 0
            elif king_col > col:
                hori = 1
            else:
                hori = -1
            if king_row == row:
                verti = 0
            elif king_row > col:
                verti = 1
            else:
                verti = -1
            for i in range(7):
                col += hori
                row += verti
                if col == king_col and row == king_row:
                    return True
                if (col,row) in board or 1 > col > 8 or 1 > row > 8:
                    break
        elif piece == 'Q' and col == king_col or row == king_row or +(king_row - row) == +(king_col - col):
            if king_col == col:
                hori = 0
            elif king_col > col:
                hori = 1
            else:
                hori = -1
            if king_row == row:
                verti = 0
            elif king_row > col:
                verti = 1
            else:
                verti = -1
            for _ in range(7):
                col += hori
                row += verti
                print(col,row)
                if col == king_col and row == king_row:
                    return True
                if (col,row) in board or 1 > col > 8 or 1 > row > 8:
                    break
                
def piece_moves(col,row,checked_squares):
    moves = []
    color = board[(col,row)][0]
    piece = board[(col,row)][1]
    if color == 'w':
        same_color = white_pieces
        opp_color = black_pieces
    else:
        same_color = black_pieces
        opp_color = white_pieces
    if piece == 'P':
        if color == 'w':
            if (col,row-1) not in board:
                moves += (col,row-1),
            if row == 7 and (col,row-2) not in board:
                moves += (col,row-2),
            if (col-1,row-1) in black_pieces:
                moves += (col-1,row-1),
            if (col+1,row-1) in black_pieces:
                moves += (col+1,row-1),
        else:
            if (col,row+1) not in board:
                moves += (col,row+1),
            if row == 2 and (col,row+2) not in board:
                moves += (col,row+2),
            if (col-1,row+1) in white_pieces:
                moves += (col-1,row+1),
            if (col+1,row+1) in white_pieces:
                moves += (col+1,row+1),
    elif piece == 'N':
        for move in knight_moves:
            if 0<col+move[0]<9 and 0<row+move[1]<9 and (col+move[0],row+move[1]) not in same_color:
                moves += (col+move[0],row+move[1]),

    elif piece == 'K':
        for move in queen_moves:
            if 0<col+move[0]<9 and 0<row+move[1]<9 and (col+move[0],row+move[1]) not in same_color:
                if (col+move[0],row+move[1]) not in checked_squares:
                    moves += (col+move[0],row+move[1]),
        if castle[color][0] == True and (4,row) not in board and (3,row) not in board and (2,row) not in board:
            moves += (2,row)
        if castle[color][1] == True and (6,row) not in board and (7,row):
            moves += (7,row)
    else:
        if piece == 'B':
            l = bishop_moves
        elif piece == 'R':
            l = rook_moves
        elif piece == 'Q':
            l = queen_moves
        for move in l:
            col1, row1 = col, row
            for _ in range(7):
                col1 += move[0]
                row1 += move[1]
                if 0 < col1 < 9 and 0 < row1 < 9:
                    if (col1,row1) in same_color:
                        break
                    elif (col1,row1) in opp_color:
                        moves += (col1,row1),
                        break
                    else:
                        moves += (col1,row1),
    for move in moves:
        if move in board:
            picked_piece = board[move]
        else:
            picked_piece = None
        board[move] = board[(col,row)]
        del board[(col,row)]
        if in_check(color) == True:
            moves.remove(move)
        board[(col,row)] = board[move]
        if picked_piece != None:
            board[move] = picked_piece
        del board[move]
    return moves

def checked_squares(check_color):
    checked_squares = set()
    for square in board:
        if board[square][0] == check_color:
            piece = board[square][1]
            col = square[0]
            row = square[1]
            if check_color == 'w':
                opp_color = 'b'
            else:
                opp_color = 'w'
            king_col = king[opp_color][0]
            king_row = king[opp_color][1]
            urow = king_row + 1 if king_row < 8 else king_row
            lrow = king_row - 1 if king_row > 1 else king_row
            ucol = king_col + 1 if king_col < 8 else king_col
            lcol = king_col - 1 if king_col > 1 else king_col
            if piece == 'P':
                if check_color == 'w':
                    if lcol <= col-1 <= ucol and lrow <= row-1 <= urow:
                        checked_squares.add((col-1,row-1))
                    if lcol <= col+1 <= ucol and lrow <= row-1 <= urow:
                        checked_squares.add((col+1,row-1))
                else:
                    if lcol <= col-1 <= ucol and lrow <= row+1 <= urow:
                        checked_squares.add((col-1,row-1))
                    if lcol <= col+1 <= ucol and lrow <= row+1 <= urow:
                        checked_squares.add((col+1,row-1))
            elif piece == 'N':
                for move in knight_moves:
                    if lcol <= col+move[0] <= ucol and lrow <= row+move[1] <= urow:
                        checked_squares.add((col+move[0],row+move[1]))
            elif piece == 'K':
                for move in queen_moves:
                    if lcol <= col+move[0] <= ucol and lrow <=row+move[1] <= urow:
                        checked_squares.add((col+move[0],row+move[1]))
            else:
                if piece == 'B':
                    l = bishop_moves
                elif piece == 'R':
                    l = rook_moves
                elif piece == 'Q':
                    l = queen_moves
                for move in l:
                    col1, row1 = col, row
                    for _ in range(7):
                        col1 += move[0]
                        row1 += move[1]
                        if 0 < col1 < 9 and 0 < row1 < 9:
                            if check_color == 'w':
                                if (col1,row1) in board and (col1,row1) != king['b']:
                                    if lcol <= col1 <= ucol and lrow <= row1 <= urow:
                                        checked_squares.add((col1,row1))
                                    break
                                else:
                                    if lcol <= col1 <= ucol and lrow <= row1 <= urow:
                                        checked_squares.add((col1,row1))
                            else:
                                if (col1,row1) in board and (col1,row1) != king['w']:
                                    if lcol <= col1 <= ucol and lrow <= row1 <= urow:
                                        checked_squares.add((col1,row1))
                                    break
                                else:
                                    if lcol <= col1 <= ucol and lrow <= row1 <= urow:
                                        checked_squares.add((col1,row1))
    return checked_squares

def evaluate(color):
    evaluation = 0
    for square in board:
        col = square[0]-1
        row = square[1]-1
        piece = board[square][1]
        if board[square][0] == color:
            evaluation += piece_value[piece]
            if color == 'w':
                evaluation += bonus[piece][row][col]
            else:
                evaluation += bonus[piece][+(7-row)][+(7-col)]
        else:
            evaluation -= piece_value[piece]
            if color == 'b':
                evaluation -= bonus[piece][+(7-row)][+(7-col)]
            else:
                evaluation -= bonus[piece][row][col]

def computer():
    if turn == 'w':
        same_pieces = white_pieces
        opp_pieces = black_pieces
    else:
        same_pieces = black_pieces
        opp_pieces = white_pieces
    moves = []
    picked_pieces = []
    for square in same_pieces:
        for move in piece_moves(square[0],square[1],checked_squares(turn)):
            moves += (move,)
            if move in opp_pieces:
                picked_pieces += board[move]
            else:
                picked_pieces += (None,)
            del board[square]
            for square1 in opp_pieces:
                if board[square1][0] == turn:
                    for move1 in piece_moves(square[0],square[1],checked_squares(turn)):
                      end = timer()
                      print(end - start)
    


